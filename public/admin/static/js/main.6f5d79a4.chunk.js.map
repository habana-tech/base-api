{"version":3,"sources":["authProvider.js","App.js","serviceWorker.js","index.js"],"names":["type","params","AUTH_LOGIN","username","password","request","Request","method","body","JSON","stringify","email","headers","Headers","fetch","then","response","status","Error","statusText","json","token","localStorage","setItem","window","location","replace","AUTH_LOGOUT","removeItem","AUTH_ERROR","Promise","reject","AUTH_CHECK","getItem","resolve","fetchHeaders","fetchHydra","url","options","baseFetchHydra","dataProvider","api","hydraClient","apiDocumentationParser","entrypoint","parseHydraDocumentation","result","customRoutes","Route","path","render","Redirect","to","Boolean","hostname","match","ReactDOM","authProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kVAMe,WAACA,EAAMC,GACpB,OAAQD,GACN,KAAKE,IAAL,IACUC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SACZC,EAAU,IAAIC,QANE,6CAM8B,CAClDC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,MAAOR,EAAUC,aACxCQ,QAAS,IAAIC,QAAQ,CAAE,eAAgB,uBAGzC,OAAOC,MAAMT,GACVU,MAAK,SAAAC,GACJ,GAAIA,EAASC,OAAS,KAAOD,EAASC,QAAU,IAAK,MAAM,IAAIC,MAAMF,EAASG,YAE9E,OAAOH,EAASI,UAEjBL,MAAK,YAAgB,IAAbM,EAAY,EAAZA,MACPC,aAAaC,QAAQ,QAASF,GAC9BG,OAAOC,SAASC,QAAQ,QAG9B,KAAKC,IACHL,aAAaM,WAAW,SACxB,MAEF,KAAKC,IACH,GAAI,MAAQ5B,EAAOgB,QAAU,MAAQhB,EAAOgB,OAG1C,OAFAK,aAAaM,WAAW,SAEjBE,QAAQC,SAEjB,MAEF,KAAKC,IACH,OAAOV,aAAaW,QAAQ,SAAWH,QAAQI,UAAYJ,QAAQC,SAEnE,QACI,OAAOD,QAAQI,Y,2kBCrCzB,IACMC,EAAe,CAAC,cAAgB,UAAhB,OAA2Bb,aAAaW,QAAQ,WAChEG,EAAa,SAACC,GAAD,IAAMC,EAAN,uDAAgB,GAAhB,OAAuBC,qBAAeF,EAAD,KACjDC,EADiD,CAEpD1B,QAAS,IAAIC,QAAQsB,OAEnBK,EAAe,SAAAC,GAAG,OAAIC,sBAAYD,EAAKL,IACvCO,EAAyB,SAAAC,GAAU,OACvCC,IAAwBD,EAAY,CAClChC,QAAS,IAAIC,QAAQsB,KACpBpB,MACD,kBAAc,CAAE0B,IAAhB,EAAGA,QACH,SAAAK,GAAW,IACDL,EAAgBK,EAAhBL,IAAKxB,EAAW6B,EAAX7B,OAEb,OAAe,MAAXA,EACKa,QAAQI,QAAQ,CACrBO,MACAxB,SACA8B,aAAc,CACZ,kBAACC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAQ,kBAAM,kBAACC,EAAA,EAAD,CAAUC,GAAG,iBAK1CtB,QAAQC,OAAOe,OCnBRO,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCZNC,IAASN,OAAO,mBF6BD,kBACX,kBAAC,aAAD,CACIP,uBAAwBA,EACxBc,aAAcA,EACdb,WAjCW,4BAkCXJ,aAAcA,MElCN,MAASkB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,kB","file":"static/js/main.6f5d79a4.chunk.js","sourcesContent":["// admin/src/authProvider.js\r\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\r\n\r\n// Change this to be your own authentication token URI.\r\nconst authenticationTokenUri = `http://localhost:8000/authentication_token`;\r\n\r\nexport default (type, params) => {\r\n  switch (type) {\r\n    case AUTH_LOGIN:\r\n      const { username, password } = params;\r\n      const request = new Request(authenticationTokenUri, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ email: username, password }),\r\n        headers: new Headers({ 'Content-Type': 'application/json' }),\r\n      });\r\n\r\n      return fetch(request)\r\n        .then(response => {\r\n          if (response.status < 200 || response.status >= 300) throw new Error(response.statusText);\r\n\r\n          return response.json();\r\n        })\r\n        .then(({ token }) => {\r\n          localStorage.setItem('token', token); // The JWT token is stored in the browser's local storage\r\n          window.location.replace('/');\r\n        });\r\n\r\n    case AUTH_LOGOUT:\r\n      localStorage.removeItem('token');\r\n      break;\r\n\r\n    case AUTH_ERROR:\r\n      if (401 === params.status || 403 === params.status) {\r\n        localStorage.removeItem('token');\r\n\r\n        return Promise.reject();\r\n      }\r\n      break;\r\n\r\n    case AUTH_CHECK:\r\n      return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\r\n\r\n      default:\r\n          return Promise.resolve();\r\n  }\r\n}","import React from 'react';\nimport parseHydraDocumentation from '@api-platform/api-doc-parser/lib/hydra/parseHydraDocumentation';\nimport { HydraAdmin, hydraClient, fetchHydra as baseFetchHydra } from '@api-platform/admin';\nimport authProvider from './authProvider';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst entrypoint = \"http://localhost:8000/api\"; // Change this by your own entrypoint if you're not using API Platform distribution\nconst fetchHeaders = {'Authorization': `Bearer ${localStorage.getItem('token')}`};\nconst fetchHydra = (url, options = {}) => baseFetchHydra(url, {\n    ...options,\n    headers: new Headers(fetchHeaders),\n});\nconst dataProvider = api => hydraClient(api, fetchHydra);\nconst apiDocumentationParser = entrypoint =>\n  parseHydraDocumentation(entrypoint, {\n    headers: new Headers(fetchHeaders),\n  }).then(\n    ({ api }) => ({ api }),\n    result => {\n      const { api, status } = result;\n\n      if (status === 401) {\n        return Promise.resolve({\n          api,\n          status,\n          customRoutes: [\n            <Route path=\"/\" render={() => <Redirect to=\"/login\" />} />,\n          ],\n        });\n      }\n\n      return Promise.reject(result);\n    }\n  );\n\nexport default () => (\n    <HydraAdmin\n        apiDocumentationParser={apiDocumentationParser}\n        authProvider={authProvider}\n        entrypoint={entrypoint}\n        dataProvider={dataProvider}\n    />\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}